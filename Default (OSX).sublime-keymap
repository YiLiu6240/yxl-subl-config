// -*- mode: json -*-
[
// ################################
// Intro:
    // OSX version keymap
// ################################

// hard-to-remember system defaults
  { "keys": ["ctrl+shift+k"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },
  { "keys": ["ctrl+super+up"], "command": "swap_line_up" },
  { "keys": ["ctrl+super+down"], "command": "swap_line_down" },

// General

  { "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/yxl_package/Macro/Add Line in Braces.sublime-macro"}, "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "(\\{|\\(|\\[)$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(\\}|\\)|\\])", "match_all": true }
    ]
  },

  { "keys": ["super+t"], "command": "new_file" },
  { "keys": ["super+n"], "command": "new_window" },
  { "keys": ["super+l", "super+l"], "command": "run_macro_file", "args": {"file": "Packages/yxl_package/Macro/SelectLine.sublime-macro"} },
  { "keys": ["alt+1"], "command": "focus_neighboring_group" },
  // { "keys": ["alt+2"], "command": "right_delete" },
  { "keys": ["super+shift+v"], "command": "paste_and_indent" },
  { "keys": ["alt+\\"], "command": "toggle_comment", "args": { "block": false } },
  { "keys": ["alt+r"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"} },

// General F-Keys
  { "keys": ["f1"], "command": "clone_file" },
  { "keys": ["shift+f1"], "command": "open_current_file_in_new_window " },
  { "keys": ["alt+f1"], "command": "toggle_setting", "args": {"setting": "draw_centered"} },

  { "keys": ["f4"], "command": "toggle_side_bar" }, // by default f4 is "next result"

  { "keys": ["f5"], "command": "toggle_tabs" }, // by default f2 is "next bookmark"
  { "keys": ["shift+f5"], "command": "insert_date_panel" }, // package: insert date

  { "keys": ["f6"], "command": "toggle_status_bar" }, // no default for f6

  { "keys": ["f7"], "command": "toggle_setting", "args": { "setting": "line_numbers" } },
  { "keys": ["f8"], "command": "toggle_setting", "args": { "setting": "gutter" } },

  { "keys": ["f9"], "command": "toggle_minimap" }, // by default f2 is "next bookmark"

// Insert
  { "keys": ["alt+i", "<character>"],
    "command": "insert_surround_chars",
    "args": {"extra_space": false},
    "context": [
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
    ]
  },
  { "keys": ["alt+i", "<character>"],
    "command": "insert_surround_chars_selection",
    "args": {"extra_space": false},
    "context": [
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": ["alt+i", "enter"],
    "command": "insert_surround_carriage"
  },
  { "keys": ["alt+y", "<character>"],
    "command": "insert_single_char",
    "context": [
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
    ]
  },
  { "keys": ["alt+u", "<character>"],
    "command": "insert_surround_chars",
    "args": {"extra_space": true},
    "context": [
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
    ]
  },
  { "keys": ["alt+u", "<character>"],
    "command": "insert_surround_chars_selection",
    "args": {"extra_space": true},
    "context": [
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

// System: masked commands
  { "keys": ["super+equals"], "command": "unbound" },
  { "keys": ["super+plus"], "command": "unbound" },
  { "keys": ["super+minus"], "command": "unbound" },

// System: assignment
  // case: when preceding/following is not " " or "="
  { "keys": ["alt+="], "command": "insert_snippet", "args": {"contents": " = "},
    "context": [
      { "key": "preceding_text", "operator": "not_regex_match", "operand": "^.*[\\s=]", "match_all": true },
      { "key": "following_text", "operator": "not_regex_match", "operand": "[\\s=].*$", "match_all": true }
    ]
  },
  // case: when preceding is " " or "="
  { "keys": ["alt+="], "command": "insert_snippet", "args": {"contents": "= "},
    "context": [
      { "key": "preceding_text", "operator": "regex_match", "operand": "^.*[\\s=]", "match_all": true },
      { "key": "following_text", "operator": "not_regex_match", "operand": "[\\s=].*$", "match_all": true }
    ]
  },
  // case: when follwing is " " or "="
  { "keys": ["alt+="], "command": "insert_snippet", "args": {"contents": " ="},
    "context": [
      { "key": "preceding_text", "operator": "not_regex_match", "operand": "^.*[\\s=]", "match_all": true },
      { "key": "following_text", "operator": "regex_match", "operand": "[\\s=].*$", "match_all": true }
    ]
  },
  // case: when preceing/following is " " or "="
  { "keys": ["alt+="], "command": "insert_snippet", "args": {"contents": "="},
    "context": [
      { "key": "preceding_text", "operator": "regex_match", "operand": "^.*[\\s=]", "match_all": true },
      { "key": "following_text", "operator": "regex_match", "operand": "[\\s=].*$", "match_all": true }
    ]
  },
  // case: when preceding " = " => " == "
  { "keys": ["alt+="], "command": "run_macro_file", "args": {"file": "Packages/yxl_package/Macro/assign_eval.sublime-macro"},
    "context": [
      { "key": "preceding_text", "operator": "regex_match", "operand": "^.*(\\s=\\s)", "match_all": true },
    ]
  },
  { "keys": ["alt+-"], "command": "insert_snippet", "args": {"contents": " <- "} },

// Vim-like
  // Open above/below
    { "keys": ["alt+o"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line.sublime-macro"} },
    { "keys": ["alt+shift+o"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line Before.sublime-macro"} },
  // delete
    { "keys": ["alt+d"], "command": "right_delete" },
    { "keys": ["alt+x"], "command": "left_delete" },

// // Language: Latex
  { "keys": ["ctrl+b"],
    "command": "insert_snippet", "args": {"name":"Packages/LaTeXTools/Text boldface.sublime-snippet"},
    "context":
    [
      {"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
      { "key": "setting.command_mode", "operand": false },
    ],
  },

  { "keys": ["ctrl+e"],
    "command": "insert_snippet", "args": {"name":"Packages/LaTeXTools/Text emphasize.sublime-snippet"},
    "context":
    [
      {"key": "selector", "operator": "equal", "operand": "text.tex.latex"},
      { "key": "setting.command_mode", "operand": false },
    ],
  },

  // Auto-pair ``$'': Latex, Python, and Markdown
    // insert matching $, note the "key": "selector" line!
    { "keys": ["$"], "command": "insert_snippet", "args": {"contents": "\\$ $0 \\$"},
    "context":
      [
        {"key": "selector", "operator": "equal", "operand": "text.tex.latex, source.python, text.html.markdown"},
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        // { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|])", "match_all": true },
        // { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
        // { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double", "match_all": true }
      ]
    },
    // wrap in $
    { "keys": ["$"], "command": "insert_snippet", "args": {"contents": "\\$ ${0:$SELECTION} \\$"}, "context":
      [
        {"key": "selector", "operator": "equal", "operand": "text.tex.latex, source.python, text.html.markdown"},
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
      ]
    },
    // move over closing $
    { "keys": ["$"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
      [
        {"key": "selector", "operator": "equal", "operand": "text.tex.latex, source.python, text.html.markdown"},
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "following_text", "operator": "regex_contains", "operand": "^\\$", "match_all": true }
      ]
    },
    // delete $ pair
    { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
      [
        {"key": "selector", "operator": "equal", "operand": "text.tex.latex, source.python, text.html.markdown"},
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "\\$$", "match_all": true },
        { "key": "following_text", "operator": "regex_contains", "operand": "^\\$", "match_all": true }
      ]
    },

  // Auto-pair curly brackets
    { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{$0}"}, "context":
      [
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
      ]
    },
    { "keys": ["{"], "command": "wrap_block", "args": {"begin": "{", "end": "}"}, "context":
      [
        { "key": "indented_block", "match_all": false }, // this is the one that cause problems
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true },
      ]
    },
    { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{${0:$SELECTION}}"}, "context":
      [
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
      ]
    },
    { "keys": ["}"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
      [
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
      ]
    },
    { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
      [
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },
        { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
      ]
    },

  // ` '
    { "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`$0'"}, "context":
      [
        { "key": "selector", "operator": "equal", "operand": "text.tex.latex"},
        { "key": "setting.command_mode", "operand": false },
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
      ]
    },
    { "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}'"}, "context":
      [
        { "key": "selector", "operator": "equal", "operand": "text.tex.latex"},
        { "key": "setting.command_mode", "operand": false },
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
      ]
    },
    { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'$0"}, "context":
      [
        { "key": "selector", "operator": "equal", "operand": "text.tex.latex"},
        { "key": "setting.command_mode", "operand": false },
        { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
        { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
        { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
        { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
        { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
      ]
    },

// Language: R
  // { "keys": ["%"], "command": "insert_snippet", "args": {"contents": "%$0%"}, "context":
  //  [
  //    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
  //    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
  //    // { "key": "preceding_text", "operator": "regex_match", "operand": "^\\s*(def\\s).*", "match_all": true },
  //    // { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|;|\\}|$)", "match_all": true },
  //    {"key": "selector", "operator": "equal", "operand": "source.r"}
  //  ]
  // },

  // { "keys": ["%"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
  //  [
  //    { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
  //    { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
  //    { "key": "following_text", "operator": "regex_contains", "operand": "^%", "match_all": true }
  //  ]
  // },

// Package: Powercursor
  { "keys": ["ctrl+="], "command": "power_cursor_add" },
  { "keys": ["ctrl+-"], "command": "power_cursor_remove",
    "context": [ { "key": "in_cursor_transition" } ]
  },
  { "keys": ["ctrl+a"], "command": "power_cursor_activate",
    "context": [ { "key": "in_cursor_transition" } ]
  },
  { "keys": ["ctrl+shift+="], "command": "power_cursor_select", "args": { "forward": false } },
  { "keys": ["ctrl+shift+-"], "command": "power_cursor_select", "args": { "forward": true } },
  { "keys": ["ctrl+shift+a"], "command": "power_cursor_exit",
    "context": [ { "key": "in_cursor_transition" } ]
  },

// Package: EasyMotion
  { "keys": ["super+;", "<character>"],
    "command": "easy_motion",
      "args": {"select_text": false}
  },
  { "keys": ["super+;", "enter"],
    "command": "easy_motion",
    "args": {"select_text": false, "character": "enter"}
  },
  { "keys": ["super+shift+;", "<character>"],
    "command": "easy_motion",
    "args": {"select_text": true}
  },
  { "keys": ["super+shift+;", "enter"],
    "command": "easy_motion",
    "args": {"select_text": true, "character": "enter"}
  },

// Package: Text Pastry
  { "keys": ["super+alt+n"], "command": "text_pastry_show_command_line", "args": { "text": "" } },
  { "keys": ["super+alt+t"], "command": "text_pastry_show_menu" },
  { "keys": ["super+alt+b"], "command": "text_pastry_redo" },

  { "keys": ["up"], "command": "text_pastry_history_navigator", "args": { "reverse": true },
    "context": [{ "key": "setting.text_pastry_command_line", "operator": "equal", "operand": true }, {"key": "panel_has_focus"}] },

  { "keys": ["down"], "command": "text_pastry_history_navigator", "args": { "reverse": false },
    "context": [{ "key": "setting.text_pastry_command_line", "operator": "equal", "operand": true }, {"key": "panel_has_focus"}] },

// Package: Open-Include
  { "keys": ["alt+g", "f"], "command": "open_include"},

// Package: Origami
  { "keys": ["ctrl+h"], "command": "travel_to_pane",
    "args": {"direction": "left"},
    "context":
    [
      { "key": "setting.command_mode", "operand": true },
    ]
  },
  { "keys": ["ctrl+j"], "command": "travel_to_pane",
    "args": {"direction": "down"},
    "context":
    [
      { "key": "setting.command_mode", "operand": true },
    ]
  },
  { "keys": ["ctrl+k"], "command": "travel_to_pane",
    "args": {"direction": "up"},
    "context":
    [
      { "key": "setting.command_mode", "operand": true },
    ]
  },
  { "keys": ["ctrl+l"], "command": "travel_to_pane",
    "args": {"direction": "right"},
    "context":
    [
      { "key": "setting.command_mode", "operand": true },
    ]
  },

// Package: iopener
  // Steal open command and use it for iOpener.
  { "keys": ["super+shift+o"], "command": "i_opener" },
  { "keys": ["super+shift+e"], "command": "i_opener" },

// Package: R box
  {
    "keys": ["super+r"],
    "command": "r_box_send_selection", "context": [
      { "key": "selector", "operator": "equal", "operand": "source.r" }
    ]
  },
  {
    "keys": ["super+shift+r"],
    "command": "r_box_change_dir",
    "context": [
      {
        "key": "selector", "operator": "equal", "operand": "source.r"
      }
    ]
  }
]
